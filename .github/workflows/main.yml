name: Terraform Security Analysis

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  trivy-analysis:
    name: Terraform Security Analysis
    runs-on: ubuntu-latest
    steps:
      # Checkout code
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis

      # Add Aqua Security repository and install Trivy
      - name: Install Trivy
        run: |
          curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash
          tfsec --version
          echo "hi:"
          # Get the latest Trivy version
          TRIVY_VERSION=$(curl --silent "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep tag_name | awk '{print $2}' | tr -d '",')
          # Download the latest Trivy binary
          curl -LO "https://github.com/aquasecurity/trivy/releases/download/$TRIVY_VERSION/trivy_Linux-64bit.tar.gz"
          # Extract the binary
          tar -xzf trivy_Linux-64bit.tar.gz
          # Move the binary to /usr/local/bin/ so that it is in the PATH
          sudo mv trivy /usr/local/bin/
          # Verify Trivy installation
          which trivy

          echo "hello"
          echo "deb [trusted=yes] https://aquasecurity.github.io/trivy-repo/ /" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
          
          # Verify installation
          which trivy

      # Run Trivy analysis on Terraform files and generate SARIF report
      - name: Run Trivy and generate SARIF report
        run: |
          trivy fs --security-checks vuln ./ --format sarif --output trivy_report.sarif

      # Upload SARIF Report to GitHub
      - name: Upload SARIF Report to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: trivy_report.sarif
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
